version: '3.8'

services:
  postgres:
    image: postgres
    container_name: go-project-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: paymentsdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - go-project

  keycloak-db:
    image: postgres
    container_name: keycloak-postgres
    ports:
      - "5433:5432"  # different port to avoid conflict
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloakpass
      POSTGRES_DB: keycloakdb
    volumes:
      - keycloak-pgdata:/var/lib/postgresql/data
    networks:
      - go-project

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    container_name: go-project-keycloak
    command: start-dev --spi-events-listener-providers=kafka-event-listener
    ports:
      - "8080:8080"
      - "8443:8443"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_URL_DATABASE: keycloakdb
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloakpass
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/certs/server.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/certs/server.key
      # переменные для listener
      KAFKA_BOOTSTRAP_SERVERS: go-project-kafka:9092
      KAFKA_TOPIC: user-events
    depends_on:
      - keycloak-db
    networks:
      - go-project
    volumes:
      - ./nginx/certs:/opt/keycloak/certs
      - ./services/keycloak-event-listener/build/libs/keycloak-event-listener-1.0.0.jar:/opt/keycloak/providers/keycloak-event-listener.jar

#  nginx:
#    image: nginx:latest
#    container_name: go-project-nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/certs:/etc/nginx/certs:ro
#    depends_on:
#      - userservice
#      - postservice
#    networks:
#      - go-project

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: go-project-minio
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data --console-address ":9090"
    volumes:
      - minio-data:/data
    networks:
      - go-project

  redis:
    image: redis:latest
    container_name: go-project-redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - go-project

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go-project-zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - go-project

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: go-project-kafka
    restart: always
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: go-project-zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://go-project-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - go-project

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    restart: always
    ports:
      - "8025:8025"
      - "1025:1025"
    networks:
      - go-project


  userservice:
    build:
      context: .                # project root is the context
      dockerfile: services/userService/Dockerfile
    container_name: userservice
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
      - kafka
    volumes:
      # Optional: safer than baking certs into image
      - ./nginx/certs/ca.crt:/usr/local/share/ca-certificates/ca.crt:ro
      - ./nginx/certs/ca.key:/etc/ssl/private/ca.key:ro
    environment:
      PORT: "8081"
      JWT_SECRET: ${JWT_SECRET}
      ACCESS_KEY: ${ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}

      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}

      REDIS_ADDR: ${REDIS_ADDR}
      REDIS_PASS: ${REDIS_PASS}

      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_PRODUCER_TOPIC: ${KAFKA_PRODUCER_TOPIC}
      KAFKA_CONSUMER_GROUP: ${KAFKA_CONSUMER_GROUP}
      KAFKA_CONSUMER_TOPICS: ${KAFKA_CONSUMER_TOPICS}

      MONGO_URI: ${MONGO_URI}
      MONGO_DB_NAME: ${MONGO_DB_NAME}

      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      KEYCLOAK_URL: ${KEYCLOAK_URL}
    networks:
      - go-project

  postservice:
    build:
      context: .
      dockerfile: services/postService/Dockerfile
    container_name: postservice
    ports:
      - "8089:8089"
    depends_on:
      - mongodb
      - kafka
    volumes:
      # Optional: safer than baking certs into image
      - ./nginx/certs/ca.crt:/usr/local/share/ca-certificates/ca.crt:ro
      - ./nginx/certs/ca.key:/etc/ssl/private/ca.key:ro
    environment:
      PORT: "8089"
      ACCESS_KEY: ${ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_HOST: ${MINIO_HOST}
      MINIO_PORT: ${MINIO_PORT}

      REDIS_ADDR: ${REDIS_ADDR}
      REDIS_PASS: ${REDIS_PASS}

      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}

      USER_SERVICE_URL: ${USER_SERVICE_URL}

      MONGO_URI: ${MONGO_URI}
      MONGO_DB_NAME: ${MONGO_DB_NAME}

      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_URL: ${KEYCLOAK_URL}

      JWT_SECRET: ${JWT_SECRET}
    networks:
      - go-project

#  auth_service:
#    build:
#      context: ./services/authService-keycloack
#      dockerfile: Dockerfile
#    container_name: auth_service
#    ports:
#      - "8082:8082"
#    env_file:
#      - .env
#    depends_on:
#      - keycloak
#    environment:
#      PORT: ${AUTH_SERVICE_PORT}
#      KEYCLOAK_URL: ${KEYCLOAK_URL}
#      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
#      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
#      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
#      KEYCLOAK_CERT_PATH: ${KEYCLOAK_CERT_PATH}
#    networks:
#      - go-project

  mongodb:
    image: mongo:6.0
    container_name: go-project-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - go-project
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongopass

volumes:
  pgdata:
  keycloak-pgdata:
  minio-data:
  mongo-data:

networks:
  go-project:
    driver: bridge